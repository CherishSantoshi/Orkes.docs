"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4169],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),k=r,m=f["".concat(l,".").concat(k)]||f[k]||u[k]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8028:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},l="Fork",c={unversionedId:"reference-docs/fork-task",id:"reference-docs/fork-task",isDocsHomePage:!1,title:"Fork",description:"`json",source:"@site/docs/reference-docs/fork-task.md",sourceDirName:"reference-docs",slug:"/reference-docs/fork-task",permalink:"/content/docs/reference-docs/fork-task",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/reference-docs/fork-task.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"referenceDocsSideBar",previous:{title:"Do While",permalink:"/content/docs/reference-docs/do-while-task"},next:{title:"Dynamic Fork",permalink:"/content/docs/reference-docs/dynamic-fork-task"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Use Cases",id:"use-cases",children:[]},{value:"Configuration",id:"configuration",children:[]}],u={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fork"},"Fork"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"type" : "FORK_JOIN"\n')),(0,o.kt)("h3",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"A Fork operation in conductor, lets you run a specified list of other tasks or sub workflows in parallel. A fork task is\nfollowed by a join operation that waits on the forked tasks or sub workflows to finish. The ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN"),"\ntask also collects outputs from each of the forked tasks or sub workflows."),(0,o.kt)("h3",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," tasks are typically used when a list of tasks can be run in parallel. E.g In a notification workflow, there\ncould be multiple ways of sending notifications, i,e e-mail, SMS, HTTP etc.. These notifications are not dependent on\neach other, and so they can be run in parallel. In such cases, you can create 3 sub-lists of forked tasks for each of\nthese operations."),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," task, has a ",(0,o.kt)("inlineCode",{parentName:"p"},"forkTasks")," attribute that expects an array. Each array, is a sub-list of tasks. Each of these\nsub-lists and then invoked in parallel. The tasks defined within each sublist can be sequential or any other way as\ndesired."),(0,o.kt)("p",null,"A FORK_JOIN task has to be followed by a JOIN operation. The ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," operator specifies which of the forked tasks\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"joinOn")," (wait for completion)\nbefore moving to the next stage in the workflow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "fork_join",\n    "taskReferenceName": "my_fork_join_ref",\n    "type": "FORK_JOIN",\n    "forkTasks": [\n      [\n        {\n          "name": "process_notification_payload",\n          "taskReferenceName": "process_notification_payload_email",\n          "type": "SIMPLE"\n        },\n        {\n          "name": "email_notification",\n          "taskReferenceName": "email_notification_ref",\n          "type": "SIMPLE"\n        }\n      ],\n      [\n        {\n          "name": "process_notification_payload",\n          "taskReferenceName": "process_notification_payload_sms",\n          "type": "SIMPLE"\n        },\n        {\n          "name": "sms_notification",\n          "taskReferenceName": "sms_notification_ref",\n          "type": "SIMPLE"\n        }\n      ],\n      [\n        {\n          "name": "process_notification_payload",\n          "taskReferenceName": "process_notification_payload_http",\n          "type": "SIMPLE"\n        },\n        {\n          "name": "http_notification",\n          "taskReferenceName": "http_notification_ref",\n          "type": "SIMPLE"\n        }\n      ]\n    ]\n  },\n  {\n    "name": "notification_join",\n    "taskReferenceName": "notification_join_ref",\n    "type": "JOIN",\n    "joinOn": [\n      "email_notification_ref",\n      "sms_notification_ref"\n    ]\n  }\n]\n')),(0,o.kt)("p",null,"Here is how the output of notification_join will look like. The output is a map, where the keys are the names of task\nreferences that were being ",(0,o.kt)("inlineCode",{parentName:"p"},"joinOn"),". The corresponding values are the outputs of those tasks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "email_notification_ref": {\n    "email_sent_at": "2021-11-06T07:37:17+0000",\n    "email_sent_to": "test@example.com"\n  },\n  "sms_notification_ref": {\n    "smm_sent_at": "2021-11-06T07:37:17+0129",\n    "sms_sen": "+1-425-555-0189"\n  }\n}\n')),(0,o.kt)("h4",{id:"input-configuration"},"Input Configuration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"name"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Name. A unique name that is descriptive of the task function")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"taskReferenceName"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Reference Name. A unique reference to this task. There can be multiple references of a task within the same workflow definition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"type"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Type. In this case, ",(0,o.kt)("inlineCode",{parentName:"td"},"FORK_JOIN"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"inputParameters"),(0,o.kt)("td",{parentName:"tr",align:null},"The input parameters that will be supplied to this task")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"forkTasks"),(0,o.kt)("td",{parentName:"tr",align:null},"A list of a list of tasks. Each of the outer list will be invoked in parallel. The inner list can be a graph of other tasks and sub-workflows")))),(0,o.kt)("h4",{id:"output-configuration"},"Output Configuration"),(0,o.kt)("p",null,"This is the output configuration of the ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," task that is used in conjunction with the ",(0,o.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," task. The output of\nthe\n",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," task is a map, where the keys are the names of the task reference names where were being ",(0,o.kt)("inlineCode",{parentName:"p"},"joinOn")," and the keys\nare the corresponding outputs of those tasks."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"task_ref_name_1"),(0,o.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,o.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"task_ref_name_2"),(0,o.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,o.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"..."),(0,o.kt)("td",{parentName:"tr",align:null},"...")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"task_ref_name_N"),(0,o.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,o.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")))))}f.isMDXComponent=!0}}]);