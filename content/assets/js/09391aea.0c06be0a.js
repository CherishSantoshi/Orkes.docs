"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[623],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,k=m["".concat(l,".").concat(f)]||m[f]||u[f]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4055:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Join",c={unversionedId:"reference-docs/join-task",id:"reference-docs/join-task",isDocsHomePage:!1,title:"Join",description:"`json",source:"@site/docs/reference-docs/join-task.md",sourceDirName:"reference-docs",slug:"/reference-docs/join-task",permalink:"/content/docs/reference-docs/join-task",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/reference-docs/join-task.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"referenceDocsSideBar",previous:{title:"Dynamic Fork",permalink:"/content/docs/reference-docs/dynamic-fork-task"},next:{title:"Wait",permalink:"/content/docs/reference-docs/wait-task"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Use Cases",id:"use-cases",children:[]},{value:"Configuration",id:"configuration",children:[]}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"join"},"Join"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"type" : "JOIN"\n')),(0,i.kt)("h3",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," task is used in conjunction with a ",(0,i.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FORK_JOIN_DYNAMIC")," task. When ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," is used along with\na ",(0,i.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," task, tt waits for a list of zero or more of the forked tasks to be completed. However, when used with\na ",(0,i.kt)("inlineCode",{parentName:"p"},"FORK_JOIN_DYNAMIC")," task, it implicitly waits for all of the dynamically forked tasks to complete."),(0,i.kt)("h3",{id:"use-cases"},"Use Cases"),(0,i.kt)("p",null,"FORK_JOIN and FORK_JOIN_DYNAMIC task are used to execute a collection of other tasks or sub workflows in parallel. In\nsuch cases, there is a need for these forked tasks to complete before moving to the next stage in the workflow. E.g in a\nnotification workflow, you could have a FORK_JOIN task that may have an email notification task, a SMS notification task,\na HTTP notification task. A JOIN task can specify zero or more of these notification tasks to complete before proceeding\nto the next step."),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Here is an example of a ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"JOIN"))," task. This task will wait for the completion of tasks ",(0,i.kt)("inlineCode",{parentName:"p"},"my_task_ref_1"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"my_task_ref_2")," as specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"joinOn")," attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "join_task",\n  "taskReferenceName": "my_join_task_ref",\n  "type": "JOIN",\n  "joinOn": [\n    "my_task_ref_1",\n    "my_task_ref_2"\n  ]\n}\n')),(0,i.kt)("p",null,"Here is an example of a ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," task used in conjunction with a ",(0,i.kt)("inlineCode",{parentName:"p"},"FORK_JOIN")," task. The 'FORK_JOIN' spawns 3 tasks.\nAn ",(0,i.kt)("inlineCode",{parentName:"p"},"email_notification")," task, a ",(0,i.kt)("inlineCode",{parentName:"p"},"sms_notification")," task and a  ",(0,i.kt)("inlineCode",{parentName:"p"},"http_notification")," task. Email and SMS are usually best\neffort delivery systems. However, in case of a http based notification you get a return code and you can retry until it\nsucceeds or eventually give up. When you setup a notification workflow, you may decide to continue ,if you kicked off an\nemail and sms notification. Im that case, you can decide to ",(0,i.kt)("inlineCode",{parentName:"p"},"joinOn")," those specific tasks. However,\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"http_notification")," task will still continue to execute, but it will not block the rest of the workflow from\nproceeding."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "fork_join",\n    "taskReferenceName": "my_fork_join_ref",\n    "type": "FORK_JOIN",\n    "forkTasks": [\n      [\n        {\n          "name": "email_notification",\n          "taskReferenceName": "email_notification_ref",\n          "type": "SIMPLE"\n        }\n      ],\n      [\n        {\n          "name": "sms_notification",\n          "taskReferenceName": "sms_notification_ref",\n          "type": "SIMPLE"\n        }\n      ],\n      [\n        {\n          "name": "http_notification",\n          "taskReferenceName": "http_notification_ref",\n          "type": "SIMPLE"\n        }\n      ]\n    ]\n  },\n  {\n    "name": "notification_join",\n    "taskReferenceName": "notification_join_ref",\n    "type": "JOIN",\n    "joinOn": [\n      "email_notification_ref",\n      "sms_notification_ref"\n    ]\n  }\n]\n')),(0,i.kt)("p",null,"Here is how the output of notification_join will look like. The output is a map, where the keys are the names of task\nreferences that were being ",(0,i.kt)("inlineCode",{parentName:"p"},"joinOn"),". The corresponding values are the outputs of those tasks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "email_notification_ref": {\n    "email_sent_at": "2021-11-06T07:37:17+0000",\n    "email_sent_to": "test@example.com"\n  },\n  "sms_notification_ref": {\n    "smm_sent_at": "2021-11-06T07:37:17+0129",\n    "sms_sen": "+1-425-555-0189"\n  }\n}\n\n')),(0,i.kt)("h4",{id:"input-configuration"},"Input Configuration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},"Task Name. A unique name that is descriptive of the task function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"taskReferenceName"),(0,i.kt)("td",{parentName:"tr",align:null},"Task Reference Name. A unique reference to this task. There can be multiple references of a task within the same workflow definition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"type"),(0,i.kt)("td",{parentName:"tr",align:null},"Task Type. In this case, ",(0,i.kt)("inlineCode",{parentName:"td"},"JOIN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"joinOn"),(0,i.kt)("td",{parentName:"tr",align:null},"A list of task reference names, that this ",(0,i.kt)("inlineCode",{parentName:"td"},"JOIN")," task will wait for completion")))),(0,i.kt)("h4",{id:"output-configuration"},"Output Configuration"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"task_ref_name_1"),(0,i.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,i.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"task_ref_name_2"),(0,i.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,i.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"..."),(0,i.kt)("td",{parentName:"tr",align:null},"...")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"task_ref_name_N"),(0,i.kt)("td",{parentName:"tr",align:null},"A task reference name that was being ",(0,i.kt)("inlineCode",{parentName:"td"},"joinOn"),". The value is the output of that task")))))}m.isMDXComponent=!0}}]);