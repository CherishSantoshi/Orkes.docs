"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6359],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return d}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(o),d=r,m=p["".concat(c,".").concat(d)]||p[d]||h[d]||i;return o?n.createElement(m,a(a({ref:t},u),{},{components:o})):n.createElement(m,a({ref:t},u))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=o[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},4680:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},assets:function(){return u},toc:function(){return h},default:function(){return d}});var n=o(7462),r=o(3366),i=(o(7294),o(3905)),a=["components"],s={slug:"orchestration-microservices-match-made-heaven",title:"Orchestration and Microservices - A match made in heaven",authors:"boney",tags:["Netflix Conductor","Orkes","Conductor","orchestration","microservices",2021]},c=void 0,l={permalink:"/content/blog/orchestration-microservices-match-made-heaven",editUrl:"https://github.com/orkes-io/docs/edit/main/blog/2021-12-15-orchestration-microservices-match-made-heaven.md",source:"@site/blog/2021-12-15-orchestration-microservices-match-made-heaven.md",title:"Orchestration and Microservices - A match made in heaven",description:"Microservices have emerged as the dominant application development paradigm in the software world today. It has",date:"2021-12-15T00:00:00.000Z",formattedDate:"December 15, 2021",tags:[{label:"Netflix Conductor",permalink:"/content/blog/tags/netflix-conductor"},{label:"Orkes",permalink:"/content/blog/tags/orkes"},{label:"Conductor",permalink:"/content/blog/tags/conductor"},{label:"orchestration",permalink:"/content/blog/tags/orchestration"},{label:"microservices",permalink:"/content/blog/tags/microservices"},{label:"2021",permalink:"/content/blog/tags/2021"}],readingTime:5.525,truncated:!1,authors:[{name:"Boney Sekh",title:"CTO",url:"https://github.com/boney9",imageURL:"https://media-exp1.licdn.com/dms/image/D5635AQGACYt5bMQdHg/profile-framedphoto-shrink_400_400/0/1641376945125?e=1641999600&v=beta&t=-bCzlO-gftanQLIQxiyCjSA8mLfYERHDBrUnARxJRGo",key:"boney"}],nextItem:{title:"The Genesis of Netflix Conductor",permalink:"/content/blog/the-genesis-of-netflix-conductor-orkes"}},u={authorsImageUrls:[void 0]},h=[],p={toc:h};function d(e){var t=e.components,s=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Microservices have emerged as the dominant application development paradigm in the software world today. It has\ntremendous benefits both from a business and technical perspective due to its fundamental characteristics of agility,\nscalability, and resiliency."),(0,i.kt)("p",null,"However, implementing microservices are hard! The inherently distributed nature of this architectural pattern introduces\ncomplexity across multiple areas especially around Transaction Management, Data Consistency, and Process Automation. In\na distributed system, Business Transactions can span across multiple services. Since we no longer have the ability to\nrun a single ACID transaction, it requires careful coordination across these services to ensure that you have a\nconsistent and reliable system at the end of a business process."),(0,i.kt)("p",null,"Solutions to solve this \u201ccoordination\u201d problem have led to the rise of a new set of application patterns that can be\nbroadly classified into two main groups - Choreography and Orchestration."),(0,i.kt)("p",null,"Let us tackle the first group - choreography which advocates the usage of events as a coordination mechanism to complete\nlocal tasks within each microservice involved in an end-to-end business transaction. Each microservice is responsible\nfor its local execution of the transaction resulting in the publishing of events that other microservices react to and\nthen execute their local transactions. In other words, a sequence of event subscriptions across various microservices to\ncomplete a business transaction."),(0,i.kt)("p",null,"Using the ubiquitous \u201cFlight Booking example to depict a choreographic approach."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Microservice Choreography",src:o(5374).Z})," ",(0,i.kt)("center",null,(0,i.kt)("em",{parentName:"p"},"Choreogrpahy"))),(0,i.kt)("p",null,"As seen the various microservices utilize events to interact with each other to complete the booking process flow."),(0,i.kt)("p",null,"The tendency to move towards choreography to implement business flows in a distributed environment is natural, the major\nappeal being the autonomy that this pattern provides. As seen in the flight booking example below, each microservice\nexecutes its local transaction and publishes events that are subscribed to by other microservices which in turn trigger\nlocal transactions."),(0,i.kt)("p",null,"But as you start looking at it more closely, we realize that there is a relationship or a logical flow between the\nsubscriptions and that is where it starts to become problematic."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To begin with, it becomes difficult to see the flow as it is embedded within code. In other words, the lack of\nvisibility into the process flows is a challenging aspect of choreography as you would need to reason over all the\nvarious microservices to infer the flow. "),(0,i.kt)("li",{parentName:"ul"},"It becomes extremely difficult to gauge the impact of a change within the flow\nrequiring coordinated deployment and hope that it works due to the inability to test it holistically (since each service\njust does its own bit). "),(0,i.kt)("li",{parentName:"ul"},"There is no systematic mechanism to report as well as action on technical/business metrics\nassociated with the process (e.g. SLAs, How much are we done with Process X ?).")),(0,i.kt)("p",null,"In short, with peer-to-peer choreography, it becomes harder to scale with growing business needs and complexities. It\ndoes offer a low entry barrier but you completely lose sight of the larger-scale flow."),(0,i.kt)("p",null,"On the other side of the spectrum is the Orchestration approach which relies purely on a task-based approach to\ncoordinate and execute process flows. Generally, it is implemented using a central component that issues task-based\nrequests to the individual services, interprets response(s), and decides to proceed/terminate or complete the flow."),(0,i.kt)("p",null,"Going back to the Flight Booking problem, if the orchestration approach is adopted, it would be depicted like something\nbelow."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Microservice Orchestration",src:o(8342).Z}),"  ",(0,i.kt)("center",null,(0,i.kt)("em",{parentName:"p"},"Orchestration"))),(0,i.kt)("p",null,"The orchestration approach does alleviate some of the problems that choreography poses - There is now complete process\nvisibility and traceability into the process flows, change impact is localized to the central component and it generally\nbecomes easier and quicker to debug issues as well as action on them."),(0,i.kt)("p",null,"However applying orchestration is easier said than done and while at first glance it looks easy, it does have a whole\nset of challenges associated with its implementation."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, how do we prevent the centralized component from being a single point of failure? "),(0,i.kt)("li",{parentName:"ul"},"In addition to that, we would need to ensure that there are no business logic creeps into the component and it does what it is intended to do\ni.e. just pure orchestration. "),(0,i.kt)("li",{parentName:"ul"},"And finally, how do we provide reliable, resilient, and scalable orchestration services\nsince it forms such a critical piece of the infrastructure.")),(0,i.kt)("p",null,"In short, we would need to build a distributed orchestration engine. And building one is not easy! Like any other piece\nof infrastructural software, it is always prudent to utilize a purpose-built tool. And it holds true in the case of a\ndistributed orchestration engine too."),(0,i.kt)("p",null,"Introducing Conductor which was built to help orchestrate microservices based process flows at Netflix."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Conductor provides a clean task-based API backed by a distributed server ecosystem to create a highly efficient and\nscalable distributed orchestration engine. "),(0,i.kt)("li",{parentName:"ul"},"It uses a well-structured DSL mechanism to help define process flows across microservices. "),(0,i.kt)("li",{parentName:"ul"},"It provides full operational control over process flows including operations for pause/resume/retry and a\nuser interface to visualize, replay and search the flows. "),(0,i.kt)("li",{parentName:"ul"},"Not to mention the fact that it is battle-tested for scale at Netflix volumes running millions of concurrent process flows.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Netflix Conductor Architecture - Orkes",src:o(9919).Z}),"  ",(0,i.kt)("center",null,(0,i.kt)("em",{parentName:"p"},"Netflix Conductor Architecture"))),(0,i.kt)("p",null,"To conclude, the choice of orchestration over choreography to help run your process flows across microservices is a safe\none. However, it would be advisable to use a purpose-built engine like Netflix Conductor to help implement your\norchestration needs. The implementation is complex especially in a distributed system and Conductor helps abstract all\nthe technical and infrastructural complexities associated with orchestration helping you focus on your business code."),(0,i.kt)("p",null,"The adoption and usage of Conductor have exploded over the past few years since it was first released. Organizations\nrely on Conductor to help implement reliable, scalable, and resilient Microservices-based applications utilizing a\nrobust distributed orchestration engine. From powering complex loan origination processes at a leading Financial\nInstitution to enabling India\u2019s largest food delivery platform to assist sales at a large real estate brokerage company,\nthe range of use cases that Conductor supports is broad."),(0,i.kt)("p",null,"And that is precisely why we started Orkes! Orkes brings to market an enterprise-grade, cloud-hosted, fully managed\nversion of Netflix Conductor offering full compatibility with the open-source version along with tiered support."),(0,i.kt)("p",null,"Early access to the platform is now available for interested\ncustomers ",(0,i.kt)("a",{parentName:"p",href:"https://orkes.io",title:"Microservices and Workflow Orchestration at scale"},"https://orkes.io")),(0,i.kt)("iframe",{src:"https://ghbtns.com/github-btn.html?user=netflix&repo=conductor&type=watch&count=true&size=large",frameborder:"0",scrolling:"0",width:"170",height:"30",title:"GitHub"}),(0,i.kt)("iframe",{src:"https://ghbtns.com/github-btn.html?user=netflix&repo=conductor&type=star&count=true&size=large",frameborder:"0",scrolling:"0",width:"170",height:"30",title:"GitHub"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor"},"Netflix Conductor Open Source Github Repo")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://orkes.io",title:"Microservices and Workflow Orchestration at scale"},"Learn more about Orkes")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://join.slack.com/t/orkes-conductor/shared_invite/zt-xyxqyseb-YZ3hwwAgHJH97bsrYRnSZg",title:"Join the Conductor Slack Community"},"Join the Orkes Conductor Slack community here")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://jobs.lever.co/Orkes/",title:"Apply to Jobs at Orkes"},"Want to work at Orkes?")))}d.isMDXComponent=!0},5374:function(e,t,o){t.Z=o.p+"assets/images/choreography-microservices-40940fb115e82b9deb4552a853bb0d48.png"},9919:function(e,t,o){t.Z=o.p+"assets/images/netflix-conductor-architecture-orkes-cbb66518714c62a1ecdac83b71129a69.png"},8342:function(e,t,o){t.Z=o.p+"assets/images/orchestration-microservices-b6ba52d773ccd37c1fc84fa3cc52c75b.png"}}]);