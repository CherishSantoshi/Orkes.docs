"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3289],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),k=r,m=d["".concat(l,".").concat(k)]||d[k]||u[k]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1826:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},l="Do While",p={unversionedId:"reference-docs/do-while-task",id:"reference-docs/do-while-task",isDocsHomePage:!1,title:"Do While",description:"`json",source:"@site/docs/reference-docs/do-while-task.md",sourceDirName:"reference-docs",slug:"/reference-docs/do-while-task",permalink:"/content/docs/reference-docs/do-while-task",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/reference-docs/do-while-task.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"referenceDocsSideBar",previous:{title:"Switch",permalink:"/content/docs/reference-docs/switch-task"},next:{title:"Fork",permalink:"/content/docs/reference-docs/fork-task"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Use Cases",id:"use-cases",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Examples",id:"examples",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"do-while"},"Do While"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"type" : "DO_WHILE"\n')),(0,o.kt)("h3",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Sequentially execute a list of task as long as a condition is true.\nThe list of tasks is executed first, before the condition is checked (even for the first iteration)."),(0,o.kt)("p",null,"When scheduled, each task of this loop will see its ",(0,o.kt)("inlineCode",{parentName:"p"},"taskReferenceName")," concatenated with __i, with i being the iteration number, starting at 1. Warning: taskReferenceName containing arithmetic operators must not be used."),(0,o.kt)("p",null,"Each task output is stored as part of the DO_WHILE task, indexed by the iteration value (see example below), allowing the condition to reference the output of a task for a specific iteration (eg. $.LoopTask","['iteration]['first_task']",")"),(0,o.kt)("p",null,"The DO_WHILE task is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"FAILED")," as soon as one of the loopTask fails. In such case retry, iteration starts from 1."),(0,o.kt)("h4",{id:"limitations"},"Limitations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Domain or isolation group execution is unsupported; - Nested DO_WHILE is unsupported; "),(0,o.kt)("li",{parentName:"ul"},"SUB_WORKFLOW is unsupported; "),(0,o.kt)("li",{parentName:"ul"},"Since loopover tasks will be executed in loop inside scope of parent do while task, crossing branching outside of DO_WHILE task is not respected. ")),(0,o.kt)("p",null,"Branching inside loopover task is supported."),(0,o.kt)("h3",{id:"use-cases"},"Use Cases"),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters:")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"name"),(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loopCondition"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"Condition to be evaluated after every iteration. This is a Javascript expression, evaluated using the Nashorn engine. If an exception occurs during evaluation, the DO_WHILE task is set to FAILED_WITH_TERMINAL_ERROR.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loopOver"),(0,o.kt)("td",{parentName:"tr",align:null},"List","[Task]"),(0,o.kt)("td",{parentName:"tr",align:null},"List of tasks that needs to be executed as long as the condition is true.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Outputs:")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"name"),(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"iteration"),(0,o.kt)("td",{parentName:"tr",align:null},"Integer"),(0,o.kt)("td",{parentName:"tr",align:null},"Iteration number: the current one while executing; the final one once the loop is finished")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"i")),(0,o.kt)("td",{parentName:"tr",align:null},"Map","[String, Any]"),(0,o.kt)("td",{parentName:"tr",align:null},"Iteration number as a string, mapped to the task references names and their output.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"*"),(0,o.kt)("td",{parentName:"tr",align:null},"Any"),(0,o.kt)("td",{parentName:"tr",align:null},"Any state can be stored here if the ",(0,o.kt)("inlineCode",{parentName:"td"},"loopCondition")," does so. For example ",(0,o.kt)("inlineCode",{parentName:"td"},"storage")," will exist if ",(0,o.kt)("inlineCode",{parentName:"td"},"loopCondition")," is ",(0,o.kt)("inlineCode",{parentName:"td"},"if ($.LoopTask['iteration'] <= 10) {$.LoopTask.storage = 3; true } else {false}"))))),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,"The following definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "Loop Task",\n    "taskReferenceName": "LoopTask",\n    "type": "DO_WHILE",\n    "inputParameters": {\n      "value": "${workflow.input.value}"\n    },\n    "loopCondition": "if ( ($.LoopTask[\'iteration\'] < $.value ) || ( $.first_task[\'response\'][\'body\'] > 10)) { false; } else { true; }",\n    "loopOver": [\n        {\n            "name": "first task",\n            "taskReferenceName": "first_task",\n            "inputParameters": {\n                "http_request": {\n                    "uri": "http://localhost:8082",\n                    "method": "POST"\n                }\n            },\n            "type": "HTTP"\n        },{\n            "name": "second task",\n            "taskReferenceName": "second_task",\n            "inputParameters": {\n                "http_request": {\n                    "uri": "http://localhost:8082",\n                    "method": "POST"\n                }\n            },\n            "type": "HTTP"\n        }\n    ],\n    "startDelay": 0,\n    "optional": false\n}\n')),(0,o.kt)("p",null,"will produce the following execution, assuming 3 executions occurred (alongside ",(0,o.kt)("inlineCode",{parentName:"p"},"first_task__1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"first_task__2"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"first_task__3"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"second_task__1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"second_task__2")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"second_task__3"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "taskType": "DO_WHILE",\n    "outputData": {\n        "iteration": 3,\n        "1": {\n            "first_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            },\n            "second_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            }\n        },\n        "2": {\n            "first_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            },\n            "second_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            }\n        },\n        "3": {\n            "first_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            },\n            "second_task": {\n                "response": {},\n                "headers": {\n                    "Content-Type": "application/json"\n                }\n            }\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);