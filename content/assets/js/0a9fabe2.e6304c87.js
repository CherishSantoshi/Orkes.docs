"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3223],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4381:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:4},u="Event Task",l={unversionedId:"reference-docs/system-tasks/event-task",id:"reference-docs/system-tasks/event-task",isDocsHomePage:!1,title:"Event Task",description:"`json",source:"@site/docs/reference-docs/system-tasks/event-task.md",sourceDirName:"reference-docs/system-tasks",slug:"/reference-docs/system-tasks/event-task",permalink:"/content/docs/reference-docs/system-tasks/event-task",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/reference-docs/system-tasks/event-task.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"referenceDocsSideBar",previous:{title:"Kafka Publish Task",permalink:"/content/docs/reference-docs/system-tasks/kafka-publish-task"},next:{title:"Switch",permalink:"/content/docs/reference-docs/switch-task"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Use Cases",id:"use-cases",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Supported Queuing Systems",id:"supported-queuing-systems",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"event-task"},"Event Task"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"type" : "EVENT"\n')),(0,o.kt)("h3",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"EVENT is a task used to publish an event into one of the supported eventing systems in Conductor.\nConductor supports the the following eventing models:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Conductor internal events (type: conductor)"),(0,o.kt)("li",{parentName:"ol"},"SQL (type: sqs)")),(0,o.kt)("h3",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,"Consider a use case where at some point in the execution, an event is published to an external eventing system such as SQS.\nEvent tasks are useful for creating event based dependencies for workflows and tasks."),(0,o.kt)("p",null,"Consider an example where we want to publish an event into SQS to notify an external system. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "EVENT",\n    "sink": "sqs:sqs_queue_name",\n    "asyncComplete": false\n}\n')),(0,o.kt)("p",null,"An example where we want to publish a messase to conductor's internal queuing system."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "EVENT",\n    "sink": "conductor:internal_event_name",\n    "asyncComplete": false\n}\n')),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("h4",{id:"input-configuration"},"Input Configuration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"name"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Name. A unique name that is descriptive of the task function")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"taskReferenceName"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Reference Name. A unique reference to this task. There can be multiple references of a task within the same workflow definition")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"type"),(0,o.kt)("td",{parentName:"tr",align:null},"Task Type. In this case, ",(0,o.kt)("inlineCode",{parentName:"td"},"EVENT"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"sink"),(0,o.kt)("td",{parentName:"tr",align:null},"External event queue in the format of ",(0,o.kt)("inlineCode",{parentName:"td"},"prefix:location"),".  Prefix is either ",(0,o.kt)("inlineCode",{parentName:"td"},"sqs")," or ",(0,o.kt)("inlineCode",{parentName:"td"},"conductor")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"location"),' sepcifies the actual queue name. e.g. "sqs:send_email_queue"')))),(0,o.kt)("h4",{id:"output-configuration"},"Output Configuration"),(0,o.kt)("p",null,"Tasks's output are sent as a payload to the external event. In case of SQS the task's output is sent to the SQS message a a payload."),(0,o.kt)("h3",{id:"supported-queuing-systems"},"Supported Queuing Systems"),(0,o.kt)("p",null,"Conductor has support for the following external event queueing systems as part of the OSS build"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"SQS (prefix: sqs)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Netflix/conductor/tree/main/contribs/src/main/java/com/netflix/conductor/contribs/queue/nats"},"NATS")," (prefix: nats)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Netflix/conductor/tree/main/contribs/src/main/java/com/netflix/conductor/contribs/queue/amqp"},"AMQP")," (prefix: amqp_queue or amqp_exchange)"),(0,o.kt)("li",{parentName:"ol"},"Internal Conductor (prefix: conductor)\nTo add support for other")))}d.isMDXComponent=!0}}]);