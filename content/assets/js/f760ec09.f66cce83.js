"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8307],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),f=p(n),d=o,k=f["".concat(i,".").concat(d)]||f[d]||c[d]||a;return n?r.createElement(k,s(s({ref:t},l),{},{components:n})):r.createElement(k,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,s[1]=u;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5937:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],u={sidebar_position:1},i="Task Inputs",p={unversionedId:"how-tos/task-inputs",id:"how-tos/task-inputs",isDocsHomePage:!1,title:"Task Inputs",description:"Task inputs can be provided in multiple ways. This is configured in the workflow definition when a task is participating",source:"@site/docs/how-tos/task-inputs.md",sourceDirName:"how-tos",slug:"/how-tos/task-inputs",permalink:"/content/docs/how-tos/task-inputs",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/how-tos/task-inputs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"howtoSideBar",previous:{title:"Task Configurations",permalink:"/content/docs/how-tos/task-configurations"},next:{title:"Task Timeouts",permalink:"/content/docs/how-tos/task-timeouts"}},l=[{value:"Inputs referred from Workflow inputs",id:"inputs-referred-from-workflow-inputs",children:[]},{value:"Inputs referred from other Task outputs",id:"inputs-referred-from-other-task-outputs",children:[]},{value:"Hard coded inputs",id:"hard-coded-inputs",children:[]}],c={toc:l};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"task-inputs"},"Task Inputs"),(0,a.kt)("p",null,"Task inputs can be provided in multiple ways. This is configured in the workflow definition when a task is participating\nin the workflow."),(0,a.kt)("h3",{id:"inputs-referred-from-workflow-inputs"},"Inputs referred from Workflow inputs"),(0,a.kt)("p",null,"When we start a workflow, we can provide inputs to the workflow in a json format. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "worfklowInputNumberExample": 1,\n  "worfklowInputTextExample": "SAMPLE",\n  "worfklowInputJsonExample": {\n    "nestedKey": "nestedValue"\n  }\n}\n')),(0,a.kt)("p",null,"These values can be referred as inputs into your task using the following expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "taskInput1Key": "${workflow.input.worfklowInputNumberExample}",\n  "taskInput2Key": "${workflow.input.worfklowInputJsonExample.nestedKey}"\n}\n')),(0,a.kt)("p",null,"In this example, the tasks will receive the following inputs after they are evaluated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "taskInput1Key": 1,\n  "taskInput2Key": "nestedValue"\n}\n')),(0,a.kt)("h3",{id:"inputs-referred-from-other-task-outputs"},"Inputs referred from other Task outputs"),(0,a.kt)("p",null,"Similar to how we can refer to workflow inputs, we can also refer to an output field that was generated by a task that\nexecuted before."),(0,a.kt)("p",null,"Let's assume a task with the task reference name ",(0,a.kt)("inlineCode",{parentName:"p"},"previousTaskReference")," executed and produced the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "taskOutputKey1": "outputValue",\n  "taskOutputKey2": {\n    "nestedKey1": "outputValue-1"\n  }\n}\n')),(0,a.kt)("p",null,"We can refer to these as the new task's input by using the following expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "taskInput1Key": "${previousTaskReference.output.taskOutputKey1}",\n  "taskInput2Key": "${previousTaskReference.output.taskOutputKey2.nestedKey1}"\n}\n')),(0,a.kt)("p",null,"The expression format is based on ",(0,a.kt)("a",{parentName:"p",href:"https://goessner.net/articles/JsonPath/"},"Json Path")," and you can construct complex\ninput params based on the syntax."),(0,a.kt)("h3",{id:"hard-coded-inputs"},"Hard coded inputs"),(0,a.kt)("p",null,"Task inputs can also be hard coded in the workflow definitions. This is useful when you have a re-usable task which has\nconfigurable options that can be applied in different workflow contexts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "taskInput1": "OPTION_A",\n  "taskInput2": 100\n}\n')))}f.isMDXComponent=!0}}]);