"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1623],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),h=c(n),d=o,k=h["".concat(s,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(k,i(i({ref:e},u),{},{components:n})):r.createElement(k,i({ref:e},u))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3172:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="Build a Python Task Worker",c={unversionedId:"how-tos/build-a-python-task-worker",id:"how-tos/build-a-python-task-worker",isDocsHomePage:!1,title:"Build a Python Task Worker",description:"Install the python client",source:"@site/docs/how-tos/build-a-python-task-worker.md",sourceDirName:"how-tos",slug:"/how-tos/build-a-python-task-worker",permalink:"/content/docs/how-tos/build-a-python-task-worker",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/how-tos/build-a-python-task-worker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"howtoSideBar",previous:{title:"Build a Java Task Worker",permalink:"/content/docs/how-tos/build-a-java-task-worker"},next:{title:"Build a Go Task Worker",permalink:"/content/docs/how-tos/build-a-golang-task-worker"}},u=[{value:"Install the python client",id:"install-the-python-client",children:[]},{value:"Implement a Task Worker",id:"implement-a-task-worker",children:[{value:"<code>ConductorWorker</code> parameters",id:"conductorworker-parameters",children:[]},{value:"<code>start</code> method parameters",id:"start-method-parameters",children:[]}]}],p={toc:u};function h(t){var e=t.components,n=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"build-a-python-task-worker"},"Build a Python Task Worker"),(0,a.kt)("h2",{id:"install-the-python-client"},"Install the python client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"   virtualenv conductorclient\n   source conductorclient/bin/activate\n   cd ../conductor/client/python\n   python setup.py install\n")),(0,a.kt)("h2",{id:"implement-a-task-worker"},"Implement a Task Worker"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor/blob/main/polyglot-clients/python/conductor/ConductorWorker.py#L36"},"ConductorWorker"),"\nclass is used to implement task workers.\nThe following script shows how to bring up two task workers named ",(0,a.kt)("inlineCode",{parentName:"p"},"book_flight")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"book_car"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from __future__ import print_function\nfrom conductor.ConductorWorker import ConductorWorker\n\ndef book_flight_task(task):\n    return {'status': 'COMPLETED', 'output': {'booking_ref': 2341111, 'airline': 'delta'}, 'logs': ['trying delta', 'skipping aa']}\n\ndef book_car_task(task):\n    return {'status': 'COMPLETED', 'output': {'booking_ref': \"84545fdfd\", 'agency': 'hertz'}, 'logs': ['trying hertz']}\n\ndef main():\n    print('Starting Travel Booking workflows')\n    cc = ConductorWorker('http://localhost:8080/api', 1, 0.1)\n    cc.start('book_flight', book_flight_task, False)\n    cc.start('book_car', book_car_task, True)\n\nif __name__ == '__main__':\n    main()\n")),(0,a.kt)("h3",{id:"conductorworker-parameters"},(0,a.kt)("inlineCode",{parentName:"h3"},"ConductorWorker")," parameters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"server_url: str\n    The url to the server hosting the conductor api.\n    Ex: 'http://localhost:8080/api'\n\nthread_count: int\n    The number of threads that will be polling for and\n    executing tasks in case of using the start method.\n\npolling_interval: float\n    The number of seconds that each worker thread will wait\n    between polls to the conductor server.\n\nworker_id: str, optional\n    The worker_id of the worker that is going to execute the\n    task. For further details, refer to the documentation\n    By default, it is set to hostname of the machine\n")),(0,a.kt)("h3",{id:"start-method-parameters"},(0,a.kt)("inlineCode",{parentName:"h3"},"start")," method parameters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pythhon"},"taskType: str\n    The name of the task that the worker is looking to execute\n\nexec_function: function\n    The function that the worker will execute. The function\n    must return a dict with the `status`, `output` and `logs`\n    keys present. If this is not present, an Exception will be\n    raised\n\nwait: bool\n    Whether the worker will block execution of further code.\n    Since the workers are being run in daemon threads, when the\n    program completes execution, all the threads are destroyed.\n    Setting wait to True prevents the program from ending.\n    If multiple workers are being called from the same program,\n    all but the last start call but have wait set to False.\n    The last start call must always set wait to True. If a\n    single worker is being called, set wait to True.\n\ndomain: str, optional\n    The domain of the task under which the worker will run. For\n    further details refer to the conductor server documentation\n    By default, it is set to None\n")),(0,a.kt)("p",null,"See\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor/tree/main/polyglot-clients/python"},"https://github.com/Netflix/conductor/tree/main/polyglot-clients/python"),"\nfor the source code."))}h.isMDXComponent=!0}}]);