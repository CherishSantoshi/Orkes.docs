"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3233],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),k=u(n),c=a,m=k["".concat(s,".").concat(c)]||k[c]||d[c]||o;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1841:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return k}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:1},s="Build a Java Task Worker",u={unversionedId:"how-tos/build-a-java-task-worker",id:"how-tos/build-a-java-task-worker",isDocsHomePage:!1,title:"Build a Java Task Worker",description:"This guide provides introduction to building Task Workers in Java.",source:"@site/docs/how-tos/build-a-java-task-worker.md",sourceDirName:"how-tos",slug:"/how-tos/build-a-java-task-worker",permalink:"/content/docs/how-tos/build-a-java-task-worker",editUrl:"https://github.com/orkes-io/docs/edit/main/docs/how-tos/build-a-java-task-worker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"howtoSideBar",previous:{title:"Dynamic vs Switch Tasks",permalink:"/content/docs/how-tos/dynamic-vs-switch-tasks"},next:{title:"Build a Python Task Worker",permalink:"/content/docs/how-tos/build-a-python-task-worker"}},p=[{value:"Dependencies",id:"dependencies",children:[{value:"Maven Dependency",id:"maven-dependency",children:[]},{value:"Gradle",id:"gradle",children:[]}]},{value:"Implementing a Task a Worker",id:"implementing-a-task-a-worker",children:[{value:"Implementing worker&#39;s logic",id:"implementing-workers-logic",children:[]}]},{value:"Configuring polling using TaskRunnerConfigurer",id:"configuring-polling-using-taskrunnerconfigurer",children:[{value:"Configuration Details",id:"configuration-details",children:[]}]}],d={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build-a-java-task-worker"},"Build a Java Task Worker"),(0,o.kt)("p",null,"This guide provides introduction to building Task Workers in Java."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"Conductor provides java client libraries, which we will use to build a simple task worker."),(0,o.kt)("h3",{id:"maven-dependency"},"Maven Dependency"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.netflix.conductor</groupId>\n    <artifactId>conductor-client</artifactId>\n    <version>3.3.4</version>\n</dependency>\n")),(0,o.kt)("h3",{id:"gradle"},"Gradle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation group: 'com.netflix.conductor', name: 'conductor-client', version: '3.3.4'\n")),(0,o.kt)("h2",{id:"implementing-a-task-a-worker"},"Implementing a Task a Worker"),(0,o.kt)("p",null,"To create a worker, implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"Worker")," interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class SampleWorker implements Worker {\n\n    private final String taskDefName;\n\n    public SampleWorker(String taskDefName) {\n        this.taskDefName = taskDefName;\n    }\n\n    @Override\n    public String getTaskDefName() {\n        return taskDefName;\n    }\n\n    @Override\n    public TaskResult execute(Task task) {\n        TaskResult result = new TaskResult(task);\n        result.setStatus(Status.COMPLETED);\n\n        //Register the output of the task\n        result.getOutputData().put("outputKey1", "value");\n        result.getOutputData().put("oddEven", 1);\n        result.getOutputData().put("mod", 4);\n\n        return result;\n    }\n}\n')),(0,o.kt)("h3",{id:"implementing-workers-logic"},"Implementing worker's logic"),(0,o.kt)("p",null,"Worker's core implementation logic goes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," method.  Upon completion, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"TaskResult")," with status as one of the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"COMPLETED"),": If the task has completed successfully."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"FAILED"),": If there are failures - business or system failures.  Based on the task's configuration, when a task fails, it maybe retried.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getTaskDefName()")," method returns the name of the task for which this worker provides the execution logic."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor/blob/main/client/src/test/java/com/netflix/conductor/client/sample/SampleWorker.java"},"SampleWorker.java")," for the complete example."),(0,o.kt)("h2",{id:"configuring-polling-using-taskrunnerconfigurer"},"Configuring polling using TaskRunnerConfigurer"),(0,o.kt)("p",null,"The TaskRunnerConfigurer can be used to register the worker(s) and initialize the polling loop.\nManages the task workers thread pool and server communication (poll and task update)."),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor/blob/main/client/src/main/java/com/netflix/conductor/client/automator/TaskRunnerConfigurer.java#L64"},"Builder")," to create an instance of the TaskRunnerConfigurer. The builder accepts the following parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},' TaskClient taskClient = new TaskClient();\n taskClient.setRootURI("http://localhost:8080/api/");        //Point this to the server API\n\n        int threadCount = 2;            //number of threads used to execute workers.  To avoid starvation, should be same or more than number of workers\n\n        Worker worker1 = new SampleWorker("task_1");\n        Worker worker2 = new SampleWorker("task_5");\n\n        // Create TaskRunnerConfigurer\n        TaskRunnerConfigurer configurer = new TaskRunnerConfigurer.Builder(taskClient, Arrays.asList(worker1, worker2))\n            .withThreadCount(threadCount)\n            .build();\n\n        // Start the polling and execution of tasks\n        configurer.init();\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Netflix/conductor/blob/main/client/src/test/java/com/netflix/conductor/client/sample/Main.java"},"Sample")," for full example. "),(0,o.kt)("h3",{id:"configuration-details"},"Configuration Details"),(0,o.kt)("p",null,"Initialize the Builder with the following:\nTaskClient | TaskClient used to communicate to the Conductor server |\n| Workers | Workers that will be used for polling work and task execution. |"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"withEurekaClient"),(0,o.kt)("td",{parentName:"tr",align:null},"EurekaClient is used to identify if the server is in discovery or not.  When the server goes out of discovery, the polling is stopped unless ",(0,o.kt)("inlineCode",{parentName:"td"},"pollOutOfDiscovery")," is set to true. If passed null, discovery check is not done."),(0,o.kt)("td",{parentName:"tr",align:null},"provided by platform")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"withThreadCount"),(0,o.kt)("td",{parentName:"tr",align:null},"Number of threads assigned to the workers. Should be at-least the size of taskWorkers to avoid starvation in a busy system."),(0,o.kt)("td",{parentName:"tr",align:null},"Number of registered workers")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"withSleepWhenRetry"),(0,o.kt)("td",{parentName:"tr",align:null},"Time in milliseconds, for which the thread should sleep when task update call fails, before retrying the operation."),(0,o.kt)("td",{parentName:"tr",align:null},"500")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"withUpdateRetryCount"),(0,o.kt)("td",{parentName:"tr",align:null},"Number of attempts to be made when updating task status when update status call fails."),(0,o.kt)("td",{parentName:"tr",align:null},"3")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"withWorkerNamePrefix"),(0,o.kt)("td",{parentName:"tr",align:null},"String prefix that will be used for all the workers."),(0,o.kt)("td",{parentName:"tr",align:null},"workflow-worker-")))),(0,o.kt)("p",null,"Once an instance is created, call ",(0,o.kt)("inlineCode",{parentName:"p"},"init()")," method to initialize the TaskPollExecutor and begin the polling and execution of tasks."),(0,o.kt)("p",null,'!!! tip "Note"\nTo ensure that the TaskRunnerConfigurer stops polling for tasks when the instance becomes unhealthy, call the provided ',(0,o.kt)("inlineCode",{parentName:"p"},"shutdown()")," hook in a ",(0,o.kt)("inlineCode",{parentName:"p"},"PreDestroy")," block."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Properties"),"\nThe worker behavior can be further controlled by using these properties:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"paused"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"If set to true, the worker stops polling."),(0,o.kt)("td",{parentName:"tr",align:null},"false")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"pollInterval"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"Interval in milliseconds at which the server should be polled for tasks."),(0,o.kt)("td",{parentName:"tr",align:null},"1000")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"pollOutOfDiscovery"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"If set to true, the instance will poll for tasks regardless of the discovery  ",(0,o.kt)("br",null)," status. This is useful while running on a dev machine."),(0,o.kt)("td",{parentName:"tr",align:null},"false")))),(0,o.kt)("p",null,"Further, these properties can be set either by Worker implementation or by setting the following system properties in the JVM:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"conductor.worker.<property>")),(0,o.kt)("td",{parentName:"tr",align:null},"Applies to ALL the workers in the JVM.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"conductor.worker.<taskDefName>.<property>")),(0,o.kt)("td",{parentName:"tr",align:null},"Applies to the specified worker.  Overrides the global property.")))))}k.isMDXComponent=!0}}]);